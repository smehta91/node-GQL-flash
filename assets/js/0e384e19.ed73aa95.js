"use strict";(self.webpackChunkzio_http_docs=self.webpackChunkzio_http_docs||[]).push([[671],{9881:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return r},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var n=a(7462),o=a(3366),l=(a(7294),a(3905)),p=["components"],r={sidebar_position:1},i="Getting Started",s={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Getting Started",description:"Http",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"node-GQL-flash/docs/intro",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Hello World",permalink:"node-GQL-flash/docs/zio-http-basic-examples/hello-world"}},c=[{value:"Http",id:"http",children:[{value:"Creating a &quot;<em>Hello World</em>&quot; app",id:"creating-a-hello-world-app",children:[],level:3},{value:"Routing",id:"routing",children:[],level:3},{value:"Composition",id:"composition",children:[],level:3},{value:"ZIO Integration",id:"zio-integration",children:[],level:3},{value:"Accessing the Request",id:"accessing-the-request",children:[],level:3},{value:"Testing",id:"testing",children:[],level:3}],level:2},{value:"Socket",id:"socket",children:[{value:"Creating a socket app",id:"creating-a-socket-app",children:[],level:3}],level:2},{value:"Server",id:"server",children:[{value:"Starting an Http App",id:"starting-an-http-app",children:[],level:3}],level:2},{value:"Examples",id:"examples",children:[],level:2}],d={toc:c};function m(e){var t=e.components,a=(0,o.Z)(e,p);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"getting-started"},"Getting Started"),(0,l.kt)("h2",{id:"http"},"Http"),(0,l.kt)("h3",{id:"creating-a-hello-world-app"},'Creating a "',(0,l.kt)("em",{parentName:"h3"},"Hello World"),'" app'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\nval app = HttpApp.text("Hello World!")\n')),(0,l.kt)("p",null,"An application can be made using any of the available operators on ",(0,l.kt)("inlineCode",{parentName:"p"},"zhttp.Http"),". In the above program for any Http request, the response is always ",(0,l.kt)("inlineCode",{parentName:"p"},'"Hello World!"'),"."),(0,l.kt)("h3",{id:"routing"},"Routing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\nval app = Http.collect[Request] {\n  case Method.GET -> Root / "fruits" / "a"  => Response.text("Apple")\n  case Method.GET -> Root / "fruits" / "b"  => Response.text("Banana")\n}\n')),(0,l.kt)("p",null,"Pattern matching on route is supported by the framework"),(0,l.kt)("h3",{id:"composition"},"Composition"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\nval a = Http.collect[Request] { case Method.GET -> Root / "a"  => Response.ok }\nval b = Http.collect[Request] { case Method.GET -> Root / "b"  => Response.ok }\n\nval app = a <> b\n')),(0,l.kt)("p",null,"Apps can be composed using the ",(0,l.kt)("inlineCode",{parentName:"p"},"<>")," operator. The way it works is, if none of the routes match in ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," , or a ",(0,l.kt)("inlineCode",{parentName:"p"},"NotFound")," error is thrown from ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),", and then the control is passed on to the ",(0,l.kt)("inlineCode",{parentName:"p"},"b")," app."),(0,l.kt)("h3",{id:"zio-integration"},"ZIO Integration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val app = Http.collectM[Request] {\n  case Method.GET -> Root / "hello" => ZIO.succeed(Response.text("Hello World"))\n}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Http.collectM")," allow routes to return a ZIO effect value."),(0,l.kt)("h3",{id:"accessing-the-request"},"Accessing the Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\nval app = Http.collect[Request] {\n  case req @ Method.GET -> Root / "fruits" / "a"  =>\n    Response.text("URL:" + req.url.path.asString + " Headers: " + r.headers)\n  case req @ Method.POST -> Root / "fruits" / "a" =>\n    Response.text(req.getBodyAsString.getOrElse("No body!"))\n}\n')),(0,l.kt)("h3",{id:"testing"},"Testing"),(0,l.kt)("p",null,"zhttp provides a ",(0,l.kt)("inlineCode",{parentName:"p"},"zhttp-test")," package for use in unit tests. You can utilize it as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zhttp.test._\nimport zhttp.http._\n\nobject Spec extends DefaultRunnableSpec {\n  val app = Http.collect[Request] {\n    case Method.GET -> Root / "text" => Response.text("Hello World!")\n  }\n  \n  def spec = suite("http") (\n    testM("should be ok") {\n      val req         = ???\n      val expectedRes = resp => resp.status.toJHttpStatus.code() == Status.OK\n      assertM(app(req))(expectedRes) // an apply method is added via `zhttp.test` package\n    }\n  )\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.http._\n\nval app = Http.collect[Request] {\n  case req @ Method.GET -> Root / "fruits" / "a"  =>\n    Response.text("URL:" + req.url.path.asString + " Headers: " + r.headers)\n  case req @ Method.POST -> Root / "fruits" / "a" =>\n    Response.text(req.getBodyAsString.getOrElse("No body!"))\n}\n')),(0,l.kt)("h2",{id:"socket"},"Socket"),(0,l.kt)("h3",{id:"creating-a-socket-app"},"Creating a socket app"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import zhttp.socket._\n\nprivate val socket = Socket.collect[WebSocketFrame] {\n  case WebSocketFrame.Text("FOO")  => ZStream.succeed(WebSocketFrame.text("BAR"))\n}\n\nprivate val app = HttpApp.collect {\n  case Method.GET -> Root / "greet" / name  => Response.text(s"Greetings {$name}!")\n  case Method.GET -> Root / "ws" => Response.socket(socket)\n}\n')),(0,l.kt)("h2",{id:"server"},"Server"),(0,l.kt)("h3",{id:"starting-an-http-app"},"Starting an Http App"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import zhttp.http._\nimport zhttp.service.Server\nimport zio._\n\nobject HelloWorld extends App {\n  val app = HttpApp.ok\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    Server.start(8090, app).exitCode\n}\n")),(0,l.kt)("p",null,"A simple Http app that responds with empty content and a ",(0,l.kt)("inlineCode",{parentName:"p"},"200")," status code is deployed on port ",(0,l.kt)("inlineCode",{parentName:"p"},"8090")," using ",(0,l.kt)("inlineCode",{parentName:"p"},"Server.start"),"."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/HelloWorld.scala"},"Simple Server")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/HelloWorldAdvanced.scala"},"Advanced Server")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/SocketEchoServer.scala"},"WebSocket Server")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/StreamingResponse.scala"},"Streaming Response")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/SimpleClient.scala"},"Simple Client")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/FileStreaming.scala"},"File Streaming")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/dream11/zio-http/blob/main/example/src/main/scala/Authentication.scala"},"Authentication"))))}m.isMDXComponent=!0}}]);